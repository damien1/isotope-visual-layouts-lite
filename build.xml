<?xml version="1.0" encoding="UTF-8"?>
<project name="isotope-visual-layouts-lite" basedir=".">

	<!-- Include config file containing  -->
	<loadproperties srcFile="build.properties" />
	<loadproperties srcFile="dev.properties" />
	<loadproperties srcFile="single.properties" />
	<loadproperties srcFile="win.properties" />
	<loadproperties srcFile="deploy.properties" />
    <loadproperties srcFile="build.number" />
	<!-- Sets variables which can later be used. -->
	<!-- The value of a property is accessed via ${} -->
	<property name="src.dir" location="src" />
	<property name="build.dir" location="build" />
	<property name="dist.dir" location="dist" />


	<fail unless="plugin.name"/>



	<!-- MAKE IT THE SAME BELOW -->
	<!-- MAKE IT THE SAME BELOW -->

	<!-- DANGER DEV Deletes the existing directory-->

	<target name="mac.plugin.clean" description="DELETES PLUGIN DIRECTORY">
		<delete dir="${mac.dir}" />
	</target>



	<!-- DANGER  SINGLE Deletes the PLUGIN directory-->
	<target name="single.clean">
		<delete dir="${mac.plugin.dir}" />
	</target>










    <!-- *************************************************************** -->
    <!--             ********     JS Concat   **********                 -->
    <!-- *************************************************************** -->

    <target name="concat-all">
        <concat destfile="js/jquery.visuallayouts.js" encoding="UTF-8" outputencoding="UTF-8" fixlastline="true">
            <filelist id="filelist" dir="${basedir}/js">
                <file name="jquery.damien.js"/>
                <file name="jquery.isotope.min.js" />
                <file name="jquery.metro.min.js" />
            </filelist>

        </concat>


    </target>




	<!-- *************************************************************** -->
	<!--             ******** PHP Lint stuff  **********                 -->
	<!-- *************************************************************** -->



	<target name="lint" description="Perform syntax check of sourcecode files">
		<apply executable="php" failonerror="true">
			<arg value="-l" />

			<fileset dir="${basedir}">
				<include name="**/*.php" />
				<modified />
			</fileset>

			<fileset dir="${basedir}/tests">
				<include name="**/*.php" />
				<modified />
			</fileset>
		</apply>
	</target>












	<target name="build.clean">
		<echo message="delete the build and dist directories ..." level="info"/>
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>


     <target name="svn_copy">
         <copy todir="${dist.dir}/${plugin.name}/trunk" overwrite="true">
             <fileset dir="${build.dir}/${plugin.name}"/>
         </copy>
     </target>

    <target name="svn_sync">
       <sync todir="${dist.dir}/${plugin.name}/trunk">
           <fileset dir="${build.dir}/${plugin.name}"/>
           <preserveintarget>
               <include name="**/.svn/**"/>
           </preserveintarget>
       </sync>
    </target>






	<!-- Creates the  build & moves the files directory-->
	<target name="makedir" depends="build.clean">
		<echo message="making build and dist directories ..." level="info"/>
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/${plugin.name}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="make" depends="makedir,readme" description="makes the magic">

		<fail message="Files are missing.">
			<condition>
				<not>
					<resourcecount count="1">
						<fileset id="fs" dir="." includes="build.properties"/>
					</resourcecount>
				</not>
			</condition>
		</fail>
        <buildnumber></buildnumber>
        <echo>${build.number}</echo>
		<copy todir="${build.dir}/${plugin.name}" failonerror="false" filtering="true">
			<fileset dir="."
							 includes="**/*.php"
							 excludes="**/templates/,**/testing/,**/tests/"
					/>
            <filterset>
                <filter token="PLUGINNAME" value="${plugin.name}"/>
                <filter token="PlUGINSTABLE" value="${plugin.stable}"/>
                <filter token="THISBUILD" value="${build.version}.${build.number}"/>
                <filter token="STABLE" value="${wordpress.stable}"/>
                <filter token="SHORTDESC" value="${plugin.short}"/>
                <filter token="MARKETINGNAME" value="${plugin.marketing}"/>
                <filter token="CHANGELOG" value="${plugin.changelog.version}"/>
            </filterset>
		</copy>

		<copy todir="${build.dir}/${plugin.name}/inc" failonerror="false">
			<fileset dir="inc"/>
		</copy>

		<copy todir="${build.dir}/${plugin.name}/js" failonerror="false">
			<fileset dir="js/"
							 includes="**/*.js"
							 excludes="**/dev/,**/testing/,**/test/"/>
		</copy>

        <copy todir="${build.dir}/${plugin.name}/css" failonerror="false">
            <fileset dir="css/"
                     includes="**/*.css"
                     excludes="**/examples/,**/testing/,**/test/"/>
        </copy>






	</target>

	<target name="readme">
		<echo message="Generating readme file ..." level="info" description="makes readme txt"/>

		<fail message="Files are missing.">
			<condition>
				<not>
					<resourcecount count="1">
						<fileset id="fs" dir="." includes="build.properties"/>
					</resourcecount>
				</not>
			</condition>
		</fail>

		<copy todir="${build.dir}/${plugin.name}">
			<fileset dir="."/>
			<globmapper from="plugin_readme.md" to="readme.txt"/>
			<filterset>
                <filter token="PlUGINSTABLE" value="${plugin.stable}"/>
                <filter token="THISBUILD" value="${build.version}.${build.number}"/>
                <filter token="STABLE" value="${wordpress.stable}"/>
                <filter token="SHORTDESC" value="${plugin.short}"/>
                <filter token="MARKETINGNAME" value="${plugin.marketing}"/>
                <filter token="CHANGELOG" value="${plugin.changelog.version}"/>
			</filterset>

		</copy>

	</target>

	<target name="dev.json">
		<echo file="dev-${plugin.name}.json" append="false">
			{
			"name" : "${plugin.name}",
			"slug" : "${plugin.name}",
			"homepage" : "http://wordpress.damien.co/${plugin.name}/",
			"download_url" : "http://whitetshirtdigital.co.uk/plugins/${plugin.name}/${plugin.name}.zip",
			"version" : "${plugin.build}",
			"requires" : "3.3",
			"tested" : "3.8.1",
			"last_updated" : "${ant.date}",
			"upgrade_notice" : "${plugin.changelog.version}",
			"author" : "Damien Saunders",
			"author_homepage" : "http://damien.co/",
			"sections" : {
			"description" : "${plugin.short}",
			"installation_notes" : "Click install to download and automatically update to the new version..",
			"changelog" : "This section list's what's changed. \n 1.7 - New Shortcode functions \n -Added pagination"
			},
			"downloaded" : 99900
			}
		</echo>
	</target>




    <target name="ubuntu_zip" depends="makedir, make, readme" description="makes the Ubuntu ZIP">
        <echo message="making the zip ..." level="info"/>
        <zip destfile="${dist.dir}/${plugin.name}-${plugin.version}.${build.number}.zip"
             basedir="/${build.dir}"
                />
    </target>







	<target name="mac_zip" depends="makedir, make, readme" description="makes the Mac ZIP">
		<echo message="making the zip ..." level="info"/>
		<zip destfile="${dist.dir}/${plugin.name}.zip"
				 basedir="/${build.dir}"
				/>
		<echo message="storing a copy in DropBox ..." level="info"/>
		<zip destfile="/Volumes/marcel/Users/damien/Dropbox/_plugins/${plugin.name}-${plugin.version}-dev-${build.number}.zip"
				 basedir="/${build.dir}"
				/>
	</target>





	<!-- *************************************************************** -->
	<!--   FTP FTP FTP FTP FTP FTP                                       -->
	<!-- *************************************************************** -->

	<target name="ftp.damien" description="FTP STUFF" depends="mac_zip">
		<echo message="ftp mkdir if doesnt exist ..." />
		<ftp action="mkdir"
				 remotedir="${server.dir}/${plugin.name}"
				 server="${server.host}"
				 userid="${server.user}"
				 password="${server.pass}"
				 verbose="true"/>


		<echo message="ftp ftp ftp ..." />
		<ftp server="${server.host}"
				 remotedir="${server.dir}/${plugin.name}"
				 userid="${server.user}"
				 password="${server.pass}"
				 verbose="true"
				 passive="true">
			<fileset dir="${dist.dir}"/>
		</ftp>
	</target>



	<!-- *************************************************************** -->
	<!--   JENKINS JENKINS JENKINS                                       -->
	<!-- *************************************************************** -->

	<target name="jenkins-build">
		<!-- Clean -->
		<antcall target="build.clean"></antcall>
		<antcall target="make"></antcall>
		<antcall target="ubuntu_zip"></antcall>
		<antcall target="ftp.damien"></antcall>
		<antcall target="dev.json"></antcall>
	</target>




	<!-- *************************************************************** -->
	<!--             ******** WP-CLI **********                       -->
	<!-- *************************************************************** -->

	<target name="wp.status" description="WP-CLI check plugin state">
		<echo message="Checking ${plugin.name} Status..." />

		<exec executable="wp" dir=".">
			<arg line="plugin status ${plugin.name}" />
		</exec>
	</target>

	<target name="wp.install" description="WP-CLI install plugin">
		<echo message="Installing ${plugin.name}..." />

		<exec executable="wp" dir=".">
			<arg line="plugin install ${dist.dir}/${plugin.name}.zip" />
		</exec>
	</target>

	<target name="wp.activate" depends="wp.install" description="WP-CLI activate plugin">
		<echo message="Activating ${plugin.name}..." />

		<exec executable="wp" dir=".">
			<arg line="plugin activate ${plugin.name}" />
		</exec>
	</target>

	<target name="wp.deactivate" description="WP-CLI deactivate plugin">
		<echo message="Deactivating ${plugin.name}..." />

		<exec executable="wp" dir=".">
			<arg line="plugin deactivate ${plugin.name}.zip" />
		</exec>
	</target>

	<target name="wp.delete" description="WP-CLI deactivate plugin">
		<echo message="Deleting ${plugin.name}..." />

		<exec executable="wp" dir=".">
			<arg line="plugin delete ${plugin.name}.zip" />
		</exec>
	</target>


    <!-- *************************************************************** -->
    <!--             ******** INIT CHECKS **********                     -->
    <!-- *************************************************************** -->


	<target name="check-abc">
		<available file="build.properties" property="abc.present"/>
        <echo message="build properties exists ..." level="info"/>
	</target>

	<target name="do-if-abc" depends="check-abc" if="abc.present">
		<property file="deploy.properties"></property>
        <echo message="deploy properties exists ..." level="info"/>
	</target>


    <!-- *************************************************************** -->
    <!--             ******** SVN STUFF **********                       -->
    <!-- *************************************************************** -->

    <property name="svn.base.url" value="${svn.repository.url}/${plugin.name}"/>





    <!-- *************************************************************** -->
    <!--             ******** SVN Checkout **********                       -->
    <!-- *************************************************************** -->




    <target name="svnCheckout" depends="makedir" description="svnCheckout from WordPress">


        <java classname="org.tmatesoft.svn.cli.SVN"
              dir="${dist.dir}" fork="true">
            <arg value="co"/>

            <arg value="http://${svn.base.url}"/>
            <classpath>
                <fileset dir="${ant.home}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>




	<!-- ****************************************************************** -->
	<!-- svnCommit:                                                          -->
	<!--                                                                     -->
	<!-- ******************************************************************* -->

	<target name="svnCommit" depends="do-if-abc">
        <record name="logfile.txt" action="start" append="true" />
        <echo message="ant home is ${ant.home}"/>
        <echo message="ant core lib is ${ant.core.lib}"/>
		<java classname="org.tmatesoft.svn.cli.SVN"
					dir="${dist.dir}/${plugin.name}/trunk" fork="true" failonerror="true">
			<arg value="commit"/>
			<arg value="--username"/>
			<arg value="${svn.username}"/>
			<arg value="-m"/>
			<arg value='"svnCommit from ANT"'/>
			<arg value="${svn.base.url}"/>
			<classpath>
				<fileset dir="${ant.home}/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</java>
        <record name="logfile.txt" action="stop"/>
	</target>

	<!-- ****************************************************************** -->
	<!-- svntag: performs tagging using properties from                              -->
	<!--         build.properties and uses SVNANT tasks                              -->
	<!-- ******************************************************************* -->
	<target name="svntag" description="tags individual project using svnant task" depends="do-if-abc">
		<property name="svn.tag.message" value="Tagging Project ${ant.project.name} with tag name ${plugin.stable} from trunk "/>
		<property name="src.url"  value="${svn.base.url}/trunk/"/>
		<property name="dest.url" value="${svn.base.url}/tags/${plugin.stable}"/>
		<record name="logfile.txt" action="start" append="true" />
		<echo message="${svn.tag.message}"/>
		<echo message="${src.url}"/>
		<echo message="${dest.url}"/>

		<java classname="org.tmatesoft.svn.cli.SVN">
			<arg value="copy"/>
			<arg value="${src.url}"/>
			<arg value="${dest.url}"/>
			<arg value="--username"/>
			<arg value="${svn.username}"/>
			<arg value="--password"/>
			<arg value="${svn.password}"/>
			<arg value="-m"/>
			<arg value="${svn.tag.message}"/>
			<classpath>
				<fileset dir="${ant.home}/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</java>
		<record name="logfile.txt" action="stop"/>
	</target>


</project>