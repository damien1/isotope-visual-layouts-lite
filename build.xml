<?xml version="1.0" encoding="UTF-8"?>
<project name="***" basedir=".">

    <!-- Include config file containing  -->
    <loadproperties srcFile="build.properties" />
    <loadproperties srcFile="dev.properties" />
    <loadproperties srcFile="single.properties" />
    <loadproperties srcFile="win.properties" />

    <!-- Sets variables which can later be used. -->
    <!-- The value of a property is accessed via ${} -->
    <property name="src.dir" location="src" />
    <property name="build.dir" location="build" />
    <property name="dist.dir" location="dist" />


    <fail unless="plugin.name"/>



    <!-- MAKE IT THE SAME BELOW -->
    <!-- MAKE IT THE SAME BELOW -->

    <!-- DANGER DEV Deletes the existing directory-->

    <target name="mac.plugin.clean">
        <delete dir="${mac.dir}" />
    </target>



    <!-- DANGER  SINGLE Deletes the PLUGIN directory-->
    <target name="single.clean">
        <delete dir="${mac.plugin.dir}" />
    </target>



    <!-- WINDOWS Deletes the existing directory-->
    <target name="win.plugin.clean">
        <delete dir="${win.dir}" />
    </target>


    <!-- WINDOWS WAMP Deletes the PLUGIN & CREATES the directory-->
    <target name="win.clean">
        <delete dir="${win.plugin.dir}" />
        <mkdir dir="${win.plugin.dir}" />
    </target>


	<!-- *************************************************************** -->
	<!--             ******** PHP Lint stuff  **********                 -->
	<!-- *************************************************************** -->



	<target name="lint" description="Perform syntax check of sourcecode files">
		<apply executable="php" failonerror="true">
			<arg value="-l" />

			<fileset dir="${basedir}">
				<include name="**/*.php" />
				<modified />
			</fileset>

			<fileset dir="${basedir}/tests">
				<include name="**/*.php" />
				<modified />
			</fileset>
		</apply>
	</target>












    <target name="build.clean">
			<echo message="delete the build and dist directories ..." level="info"/>
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>











    <!-- Creates the  build & moves the files directory-->
    <target name="makedir" depends="build.clean">
			<echo message="making build and dist directories ..." level="info"/>
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.dir}/${plugin.name}" />
        <mkdir dir="${dist.dir}" />
    </target>

    <target name="make" depends="makedir">
        <copy todir="${build.dir}/${plugin.name}">
            <fileset dir="."
                     includes="**/*.php"
                     excludes="**/templates/,**/testing/,**/tests/"
                    />
        </copy>

        <copy todir="${build.dir}/${plugin.name}/inc">
            <fileset dir="inc"/>
        </copy>


    </target>

    <target name="readme">
        <echo message="Generating readme file ..." level="info"/>
        <copy todir="${build.dir}/${plugin.name}">
            <fileset dir="."/>
            <globmapper from="plugin_readme.md" to="readme.txt"/>
            <filterset>
                <filter token="BUILD" value="${plugin.version}"/>
								<filter token="STABLE" value="${plugin.stable}"/>
								<filter token="SHORTDESC" value="${plugin.short}"/>
            </filterset>

        </copy>

    </target>







    <target name="mac_zip" depends="makedir, make, readme">
			<echo message="making the zip ..." level="info"/>
        <zip destfile="${dist.dir}/${plugin.name}.zip"
             basedir="/${build.dir}"
                />
			<echo message="storing a copy in DropBox ..." level="info"/>
        <zip destfile="/Volumes/Proust/dropbox/_plugins/${plugin.name}.zip"
             basedir="/${build.dir}"
                />
    </target>

    <target name="win_zip" depends="win.clean,make">
			<echo message="win zip is funny ..." level="info"/>
        <zip destfile="${dist.dir}/${plugin.name}.zip"
             basedir="${plugin.name}"
                />

    </target>

	<!-- *************************************************************** -->
	<!--   You need WP CLI for this                                      -->
	<!-- *************************************************************** -->
    <target name="wp.status">
        <echo message="Checking WP Status..." />

        <exec executable="wp" dir=".">
            <arg line="plugin status ${plugin.name}" />
        </exec>
    </target>

	<!-- *************************************************************** -->
	<!--             ******** SVN STUFF **********                       -->
	<!-- *************************************************************** -->

	<property name="svn.base.url" value="${svn.repository.url}/${svn.project.base.path}"/>

	<target name="check-abc">
		<available file="build.properties" property="abc.present"/>
	</target>

	<target name="do-if-abc" depends="check-abc" if="abc.present">
		<property file="deploy.properties"></property>
	</target>








	<!-- ****************************************************************** -->
	<!-- svnCommit:                                                          -->
	<!--                                                                     -->
	<!-- ******************************************************************* -->

		<target name="svnCommit" depends="do-if-abc">

		<java classname="org.tmatesoft.svn.cli.SVN"
					dir="${build.dir}" fork="true">
							<arg value="commit"/>
							<arg value="--username"/>
							<arg value="${svn.username}"/>
							<arg value="-m"/>
							<arg value='"Testing"'/>
							<arg value="${svn.base.url}"/>
			<classpath>
				<fileset dir="${ant.home}/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</java>
	</target>

	<!-- ****************************************************************** -->
	<!-- svntag: performs tagging using properties from                              -->
	<!--         build.properties and uses SVNANT tasks                              -->
	<!-- ******************************************************************* -->
	<target name="svntag" description="tags individual project using svnant task" depends="do-if-abc">
		<property name="svn.tag.message" value="Tagging Project ${ant.project.name} with tag name ${tag.name} from trunk "/>
		<property name="src.url"  value="${svn.base.url}/trunk/"/>
		<property name="dest.url" value="${svn.base.url}/tags/${tag.name}"/>
		<record name="logfile.txt" action="start" append="true" />
		<echo message="${svn.tag.message}"/>
		<echo message="${src.url}"/>
		<echo message="${dest.url}"/>

		<java classname="org.tmatesoft.svn.cli.SVN">
			<arg value="copy"/>
			<arg value="${src.url}"/>
			<arg value="${dest.url}"/>
			<arg value="--username"/>
			<arg value="${svn.username}"/>
			<arg value="--password"/>
			<arg value="${svn.password}"/>
			<arg value="-m"/>
			<arg value="${svn.tag.message}"/>
			<classpath>
				<fileset dir="${ant.home}/lib">
				<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</java>
		<record name="logfile.txt" action="stop"/>
	</target>


</project>